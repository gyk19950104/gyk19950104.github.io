<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backends on gyk&#39;s blog</title>
    <link>https://gyk19950104.github.io/backend/</link>
    <description>Recent content in Backends on gyk&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 10 Jun 2021 20:03:59 +0800</lastBuildDate>
    
	<atom:link href="https://gyk19950104.github.io/backend/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>7.数据库</title>
      <link>https://gyk19950104.github.io/backend/7.%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Thu, 10 Jun 2021 20:03:59 +0800</pubDate>
      
      <guid>https://gyk19950104.github.io/backend/7.%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>1.数据库分类  关系数据库：oracle，mysql 非关系数据库：mongodb，redis  2.基本概念  1.DQL数据查询语句，DDL数据定义语言，DCL数据控制语言，TCL事务控制语言。 2.主键：可查询到唯一对应的数据，是非空且唯一的,如果是整数类型则需要自增。 3.非外键约束：对单表字段的限定条件 4.外键约束：多表间有联系的字段添加限制条件 5.级联操作：操作主表时影响从表的外键信息 6.事务：多条sql命令完成一件事，具有原子性，一致性，隔离性，持久性 7.脏读：一个事务读取了另一个没提交的事务 8.幻读：同一事务中，读取了其他插入的数据，导致前后结果不一致  3.常用sql命令 //1.登陆数据库 mysql -u root -p rootroot //2.查看信息 show databases; show tables; select * from 表; desc t_student; show create table t_student; //3.操作数据 ## 创建表格 create table t_student( sno int(6) primary key auto_increment, sname varchar(5) not null, sex char(1) default &#39;男&#39; check(sex=&#39;男&#39;|| sex=&#39;女&#39;), sage int(3) check(sage&amp;gt;=18 and sage&amp;lt;=50), enterdate date, classname varchar(10), email varchar(15) unique ); ## 插入数据 insert into t_student values(); alter table t_student add score double(5,2) first/after; alter table t_student drop score; ## 修改数据 update t_student set sex = &#39;女&#39; where sno = 1; ## 删除数据 delete from t_student where sno=1; drop table t_student; ## 外键 ## 班级表 create table t_class( cno int(6) primary key auto_increment, cname varchar(10) not null, room char(4) ); insert into t_class values(null,&#39;java001&#39;,&#39;r803&#39;); insert into t_class values(null,&#39;java002&#39;,&#39;r416&#39;); insert into t_class values(null,&#39;java002&#39;,&#39;r103&#39;); ## 学生表 create table t_student( sno int(6) primary key auto_increment, sname varchar(5) not null, cno int(4), constraint fk_stu_cno foreign key(cno) references t_class(cno) ); insert into t_student values(null,&#39;章三&#39;,1),(null,&#39;里斯&#39;,1),(null,&#39;王武&#39;,2); ## 事务 //4.</description>
    </item>
    
    <item>
      <title>6.java杂项</title>
      <link>https://gyk19950104.github.io/backend/6.java%E6%9D%82%E9%A1%B9/</link>
      <pubDate>Tue, 01 Jun 2021 17:40:00 +0800</pubDate>
      
      <guid>https://gyk19950104.github.io/backend/6.java%E6%9D%82%E9%A1%B9/</guid>
      <description>1.泛型 泛型：检测或设置引用数据类型
 在集合中加泛型可以规定存入集合的数据类型，便于后续遍历 在类中加泛型可以后期传入具体的数据类型，而不必提前规定  package wiki.mrx.www; class Testa&amp;lt;E&amp;gt; { public void test(E m){ } } public class Test { public static void main(String[] args) { Testa&amp;lt;String&amp;gt; t = new Testa&amp;lt;&amp;gt;(); t.test(&amp;quot;test&amp;quot;); } } 2.异常 异常都继承于Throwable类，具体分类如下：
 Error Exception  检查异常 运行时异常 可以使用如下结构处理异常：    try{ }catch (Exception e){ e.printStackTrace(); }finally { } 3.注解 注解Annotation：代码编译时会被读取并自动操作标记好的内容
JDK内置了3个注解：@Override重写，@Deprecated过时标记 @SuppressWarnings抑制警告
jdk5.0提供了4个源注解：Retention生命周期 Target作用目标 Documented文档 Inherited继承
4.枚举 枚举类enum：可创建的对象个数是有限的，确定的
package wiki.mrx; public class Season { private final String seasonName; private final String seasonDesc; private Season(String seasonName, String seasonDesc) { this.</description>
    </item>
    
    <item>
      <title>5。java集合容器</title>
      <link>https://gyk19950104.github.io/backend/5.java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Tue, 01 Jun 2021 17:39:34 +0800</pubDate>
      
      <guid>https://gyk19950104.github.io/backend/5.java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</guid>
      <description>1.基础知识 算法：解决问题的方法，可用时间复杂度，空间复杂度来评判效率
数据结构：组织管理数据
逻辑上表现为：线性表，图，树，堆，栈
物理上表现为：紧密顺序结构，跳转链式结构
集合用于存储引用类型数据，具体分为：
 Collection接口  List子接口  ArrayList实现类 Vector实现类 LinkedList实现类   Set子接口  HashSet实现类  LinkedHashSet实现类   TreeSet实现类     Map接口  HashMap TreeMap    2.Collection接口 package wiki.mrx.www; import java.util.ArrayList; import java.util.Collection; import java.util.Iterator; public class TestCollection { public static void main(String[] args) { //创建对象 Collection col = new ArrayList(); //增 col.add(18); col.add(18); col.add(18); col.add(18); //增强型for循环遍历 for (Object o: col) { System.</description>
    </item>
    
    <item>
      <title>4.java网络编程</title>
      <link>https://gyk19950104.github.io/backend/4.java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Tue, 01 Jun 2021 17:37:49 +0800</pubDate>
      
      <guid>https://gyk19950104.github.io/backend/4.java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
      <description>1.基础知识 网络互联需要ip和端口，传输时需要遵守一定的规则，这个规则就是网络传输协议，即四层传输协议：
 应用层http 传输层udp,tcp 网络层ip 链路层  2.tcp协议 三次握手：客户端与服务器建立连接
四次挥手：客户端与服务器断开连接
//客户端 package wiki.mrx.www; import java.io.*; import java.net.Socket; import java.util.Scanner; public class TestClient { public static void main(String[] args){ System.out.println(&amp;quot;客户端启动了&amp;quot;); //1.创建套接字，指定ip和端口 Socket s = null; OutputStream os = null; ObjectOutputStream oos = null; InputStream is = null; DataInputStream dis = null; try { s = new Socket(&amp;quot;192.168.18.5&amp;quot;,8888); //录入账号密码 Scanner sc = new Scanner(System.in); System.out.println(&amp;quot;请录入账号：&amp;quot;); String name = sc.next(); System.out.println(&amp;quot;请录入密码：&amp;quot;); String pwd = sc.</description>
    </item>
    
    <item>
      <title>3.javaio流</title>
      <link>https://gyk19950104.github.io/backend/3.javaio%E6%B5%81/</link>
      <pubDate>Tue, 01 Jun 2021 17:37:33 +0800</pubDate>
      
      <guid>https://gyk19950104.github.io/backend/3.javaio%E6%B5%81/</guid>
      <description>1.文件外 java将文件抽象为file类可以操作盘符上的文件
package wiki.mrx.www; import java.io.File; public class FileTest { public static void main(String[] args) { File f = new File(&amp;quot;/Users/gyk/desktop/test.txt&amp;quot;); System.out.println(f.canExecute() ); System.out.println(f.canRead()); System.out.println(f.getName()); System.out.println(f.canWrite()); System.out.println(f.exists()); System.out.println(f.getAbsoluteFile()); System.out.println(f.getAbsolutePath()); System.out.println(f.getParentFile()); System.out.println(f.getPath()); System.out.println(f.isDirectory()); System.out.println(f.isHidden()); System.out.println(f.lastModified()); System.out.println(f.length()); System.out.println(f.list()); } } 2.文件内 文件的本质是二进制的数据，可以把他们想像成水源和管道，他们都有进有出，根据传输的用途分为：
 处理文本文件的字符流 处理非文本文件的字节流 减少硬盘操作次数的处理流 转换流 数据流操作基本数据类型和string 对象流操作引用类型数据  ===========================================
处理文本文件的字符流
用FileReader和FileWriter完成文本文件复制,缓冲数组 ===========================================
//用FileReader和FileWriter完成文本文件复制 package wiki.mrx.www; import java.io.*; public class FileTest { public static void main(String[] args) throws IOException { //1.新建源文件和目标文件 File f1 = new File(&amp;quot;/Users/gyk/desktop/test.</description>
    </item>
    
    <item>
      <title>Java多线程</title>
      <link>https://gyk19950104.github.io/backend/2.java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 01 Jun 2021 17:22:28 +0800</pubDate>
      
      <guid>https://gyk19950104.github.io/backend/2.java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>1.多线程 多线程就是指多核CPU同时干多件事 在java中开启多线程有三种方法： 继承Thread类， 实现Runnable接口 实现Callable接口 但Thread因为是类的继承，所以有单继承的弊端， Runnable是接口实现，可以进行多继承， 使用时implements实现接口重写run方法，但无返回值， Callable是接口实现，可以进行多继承，也有返回值， 根据不同情况，合理选择使用Runnable和Callable接口 开启多线程后，由于多个线程执行顺序是由CPU自行调度， 这种不确定性会引起执行结果的不稳定性，除执行顺序外， 还可能出现多个线程同时操作同一份资源的情况，这会导 致资源不安全，所以需要线程同步，它的本质是一种等待 的机制，在JDK5之前，我们可以通过synchronized方 法或者synchronized同步块来对资源进行隐式加锁，保 证安全，在JDK5之后，我们可以通过lock锁机制来显式加 锁，保证安全，一般少量代码用synchronized，大量代码 用lock锁 👉synchronized方法： 可以通过private关键字来保证数据对象只能被方法访问， 所以只需要对这个方法提出一套机制，这套机制就是 synchronized 关键字，即synchronized方法 👉synchronized同步块： 有时并不需要对数据添加private关键字 ，而是在代码 中直接使用synchronized( Obj ){ }同步块，obj是 类似于上面的私有数据对象 👉lock锁机制： 多线程编程时同步队列会出现很多常见涉及到锁的情形， 在java中将这些多线程常见情形抽象封装成开箱即用的 工具包，叫做JUC，常见的JUC.locks，JUC.automic 等，它包含了很多接口和实现类，可以拿来即用 ===========================================
2.1创建：thread，runnable，callable
===========================================
//创建 //继承Thread类,重写run方法，新建对象后start开启线程 package wiki.mrx.www; public class TestThread extends Thread{ //主线程 public static void main(String[] args) { //创建并开启线程 TestThread t1 = new TestThread(); t1.start(); //主线程代码 for (int i=0;i&amp;lt;20;i++){ System.out.println(&amp;quot;我在学习多线程&amp;quot;+i); } } @Override public void run() { for (int i=0;i&amp;lt;20;i++){ System.</description>
    </item>
    
    <item>
      <title>java面向对象</title>
      <link>https://gyk19950104.github.io/backend/1.java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Tue, 01 Jun 2021 17:22:15 +0800</pubDate>
      
      <guid>https://gyk19950104.github.io/backend/1.java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>先有逻辑正确的思路，剩余的是重复的实践与积累
1.面向对象 ===========================================
1.1 类是有属性，方法和构造器的模版，对象是实例
===========================================
1.2 面向对象的三大特性：
===========================================
 封装：修饰符，get,set方法 继承：extends，super，源头object 多态：同一行为，不同子类有不同表现，继承，子类重写父类方法，父类引用指向子类实例  //父类 package wiki.mrx.www; public class Person { //属性 private String name; static int age; //构造器：用于初始化数据 public Person(String name, int age) { this.name = name; this.age = age; } //get方法 public String getName() { return name; } public static int getAge() { return age; } //set方法 public void setName(String name) { this.name = name; } public static void setAge(int age) { Person.</description>
    </item>
    
  </channel>
</rss>